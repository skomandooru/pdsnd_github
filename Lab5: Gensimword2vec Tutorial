{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.6",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "colab": {
      "name": "lab5_gensim_word2vec_tutorial.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/skomandooru/pdsnd_github/blob/master/Lab5%3A%20Gensimword2vec%20Tutorial\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "84163f3ca19c0b7c9fda47121b3bc4cadfaf1fcc",
        "id": "SpGBhAGaCMfL"
      },
      "source": [
        "# Lab 5: Gensim Word2VecÂ Tutorial"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "6721f3a77cbc903d996b88c42f22c3e5e920e909",
        "id": "yht8GZRmCMfN"
      },
      "source": [
        "\n",
        "<img src=\"https://images.freeimages.com/images/large-previews/2b9/letters-1-yes-1188348.jpg\" alt=\"drawing\" width=\"350\"/>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "9e858d8c6e56ee78629e1cc21ce8fee6dc3cec0b",
        "id": "13wUSiroCMfQ"
      },
      "source": [
        "# Motivation\n",
        "\n",
        "As I started working at [Supportiv](http://www.supportiv.com), the support network for instant peer support, a few months ago, I began looking into Language Models and Word2Vec particularly. A python native, I naturally decided to focus on Gensim's implementation of Word2Vec, and went on to look for tutorials on the web. As all good data scientists, I directly applied and reproduced the code samples from multiple website. Confused and often disappointed by the results I got, I went deeper and deeper, from stackoverflow threads, to Gensim's Google Groups, onto the documentation of the library, to try and understand what went wrong in my approach. After weeks of hard labor, I finally managed to get decent results, but I was frustrated by these online tutorials which were, for the most part, misleading.\n",
        "\n",
        "What troubled me the most in these online tutorials was their mismanagement of the model training: the code worked, and I got results which appeared to be decent at first, but the more I looked into them, the more disturbing they were. I wasted a lot of time figuring out what was wrong.\n",
        "\n",
        "Another issue I had with these tutorials was the data preparation step: too often, the authors chose to load an existing preprocessed dataset, use a toy example or skip this part. However, I always thought that one of the most important parts of the creation of a Word2Vec model was then missing. During my experimentations, I noticed that lemmatizing the sentences or looking for phrases/bigrams in them had a big impact over the results and performance of my models. Though the influence of the preprocessing varies with each dataset and application, I thought I would include the data preparation steps in this tutorial and use the great spaCy library along with it.\n",
        "\n",
        "I am not the only one annoyed by some of these [issues](https://groups.google.com/d/msg/gensim/jom4JFt7EV8/y5fjhupbAgAJ), so I decided to write my own tutorial.\n",
        "\n",
        "I do not pledge that it is perfect, nor the best way to implement Word2Vec, simply that it is better than a good chunk of what is out there ðŸ˜‰"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "aa10f4823faa729e96f15bb865e9f20769ea7a4b",
        "id": "eEuO_PCUCMfR"
      },
      "source": [
        "# Plan\n",
        "\n",
        "1. [Briefing about Word2Vec](#Briefing-about-Word2Vec:)\n",
        "    * [Purpose of the tutorial](#Purpose-of-the-tutorial:)\n",
        "    * [Brief explanation](#Brief-explanation:)\n",
        "\n",
        "2. [Getting Started](#Getting-Started)\n",
        "    * [Setting up the environment](#Setting-up-the-environment:)\n",
        "    * [The data](#The-data:)\n",
        "3. [Preprocessing](#Preprocessing)\n",
        "    * [Cleaning](#Cleaning)\n",
        "    * [Bigrams](#Bigrams)\n",
        "    * [Most frequent words](#Most-Frequent-Words)\n",
        "    \n",
        "4. [Training the Model](#Training-the-model)\n",
        "    * [Gensim Word2Vec Implementation](#Gensim-Word2Vec-Implementation:)\n",
        "    * [Why I seperate the training of the model in 3 steps](#Why-I-seperate-the-training-of-the-model-in-3-steps:)\n",
        "    * [Training the model](#Training-the-model)\n",
        "        * [The parameters](#The-parameters)\n",
        "        * [Building the vocabulary table](#Building-the-Vocabulary-Table)\n",
        "        * [Training of the model](#Training-of-the-model)\n",
        "        * [Saving the model](#Saving-the-model:)\n",
        "5. [Exploring the Model](#Exploring-the-model)\n",
        "    * [Most similar to](#Most-similar-to:)\n",
        "    * [Similarities](#Similarities:)\n",
        "    * [Odd-one-out](#Odd-One-Out:)\n",
        "    * [Analogy difference](#Analogy-difference:)\n",
        "    * [t-SNE visualizations](#t-SNE-visualizations:)\n",
        "        * [10 Most similar words vs. 8 Random words](#10-Most-similar-words-vs.-8-Random-words:)\n",
        "        * [10 Most similar words vs. 10 Most dissimilar](#10-Most-similar-words-vs.-10-Most-dissimilar:)\n",
        "        * [10 Most similar words vs. 11th to 20th Most similar words](#10-Most-similar-words-vs.-11th-to-20th-Most-similar-words:)\n",
        "6. [Final Thoughts](#Final-Thoughts)\n",
        "7. [Material for more in depths understanding](#Material-for-more-in-depths-understanding:)\n",
        "8. [Acknowledgements](#Acknowledgements)\n",
        "9. [References](#References:)\n",
        "10. [End](#End)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "7d96105f0c90bf052b2afdb684bf31549e1e6c81",
        "id": "om5fvB7GCMfS"
      },
      "source": [
        "# Briefing about Word2Vec:\n",
        "\n",
        "<img src=\"http://mccormickml.com/assets/word2vec/skip_gram_net_arch.png\" alt=\"drawing\" width=\"550\"/>\n",
        "\n",
        "[[1]](#References:)\n",
        "\n",
        "\n",
        "## Purpose of the tutorial:\n",
        "As I said before, this tutorial focuses on the right use of the Word2Vec package from the Gensim libray; therefore, I am not going to explain the concepts and ideas behind Word2Vec here. I am simply going to give a very brief explanation, and provide you with links to good, in depth tutorials.\n",
        "\n",
        "## Brief explanation:\n",
        "\n",
        "Word2Vec was introduced in two [papers](#Material-for-more-in-depths-understanding:) between September and October 2013, by a team of researchers at Google. Along with the papers, the researchers published their implementation in C. The Python implementation was done soon after the 1st paper, by [Gensim](https://radimrehurek.com/gensim/index.html). \n",
        "\n",
        "The underlying assumption of Word2Vec is that two words sharing similar contexts also share a similar meaning and consequently a similar vector representation from the model. For instance: \"dog\", \"puppy\" and \"pup\" are often used in similar situations, with similar surrounding words like \"good\", \"fluffy\" or \"cute\", and according to Word2Vec they will therefore share a similar vector representation.<br>\n",
        "\n",
        "From this assumption, Word2Vec can be used to find out the relations between words in a dataset, compute the similarity between them, or use the vector representation of those words as input for other applications such as text classification or clustering.\n",
        "\n",
        "# Getting Started\n",
        "\n",
        "## Setting up the environment:\n",
        "\n",
        "`python==3.6.3`\n",
        "\n",
        "Libraries used:\n",
        " * `xlrd==1.1.0`: https://pypi.org/project/xlrd/\n",
        " * `spaCy==2.0.12`: https://spacy.io/usage/\n",
        " * `gensim==3.4.0`: https://radimrehurek.com/gensim/install.html\n",
        " * `scikit-learn==0.19.1`: http://scikit-learn.org/stable/install.html\n",
        " * `seaborn==0.8`: https://seaborn.pydata.org/installing.html"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "cc7b3e6ca62670ff13626705402f626778487204",
        "id": "nRHsU4oqCMfb"
      },
      "source": [
        "import re  # For preprocessing\n",
        "import pandas as pd  # For data handling\n",
        "from time import time  # To time our operations\n",
        "from collections import defaultdict  # For word frequency\n",
        "\n",
        "import spacy  # For preprocessing\n",
        "\n",
        "import logging  # Setting up the loggings to monitor gensim\n",
        "logging.basicConfig(format=\"%(levelname)s - %(asctime)s: %(message)s\", datefmt= '%H:%M:%S', level=logging.INFO)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "8ec7ce784f6d9e7f71e2b5789b1e65ec4414628b",
        "id": "N-k9Tws-CMfl"
      },
      "source": [
        "<img src=\"https://upload.wikimedia.org/wikipedia/commons/4/44/Logo_The_Simpsons.svg\" alt=\"drawing\" width=\"400\"/>\n",
        "\n",
        "## The data:\n",
        "I chose to play with the script from the Simpsons, both because I love the Simpsons and because with more than 150k lines of dialogues, the dataset was substantial!\n",
        "\n",
        "This dataset contains the characters, locations, episode details, and script lines for approximately 600 Simpsons episodes, dating back to 1989. It can be found here: https://www.kaggle.com/ambarish/fun-in-text-mining-with-simpsons/data (~25MB)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "0c36323d9aa62f74ab348cda5ee0f571aa1d4a96",
        "id": "InlL-ajdCMfm"
      },
      "source": [
        "# Preprocessing\n",
        "\n",
        "We keep only two columns:\n",
        "* `raw_character_text`: the character who speaks (can be useful when monitoring the preprocessing steps)\n",
        "* `spoken_words`: the raw text from the line of dialogue\n",
        "\n",
        "We do not keep `normalized_text` because we want to do our own preprocessing.\n",
        "\n",
        "You can find the resulting file here: https://www.kaggle.com/pierremegret/dialogue-lines-of-the-simpsons"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Frnicgv8GdKB",
        "outputId": "43c082c6-c5c5-4905-8439-a60fb4d54b1f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "6453b9c3f797e51923e030090ead659253f4e459",
        "id": "v1lcrFvpCMfn",
        "outputId": "8967f980-c862-4d40-ba78-98a4e2dc8633",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "path = \"/content/drive/My Drive/DSL/simpsons_dataset.csv\"\n",
        "df = pd.read_csv(path)\n",
        "df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(158314, 2)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "c6c6bf4462fb4bc00c2abdbf65eced888219f364",
        "id": "IBCRwhOYCMfu",
        "outputId": "277ae82d-0d36-47ca-9272-8904b97c91f8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>raw_character_text</th>\n",
              "      <th>spoken_words</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Miss Hoover</td>\n",
              "      <td>No, actually, it was a little of both. Sometim...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Lisa Simpson</td>\n",
              "      <td>Where's Mr. Bergstrom?</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Miss Hoover</td>\n",
              "      <td>I don't know. Although I'd sure like to talk t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Lisa Simpson</td>\n",
              "      <td>That life is worth living.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Edna Krabappel-Flanders</td>\n",
              "      <td>The polls will be open from now until the end ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        raw_character_text                                       spoken_words\n",
              "0              Miss Hoover  No, actually, it was a little of both. Sometim...\n",
              "1             Lisa Simpson                             Where's Mr. Bergstrom?\n",
              "2              Miss Hoover  I don't know. Although I'd sure like to talk t...\n",
              "3             Lisa Simpson                         That life is worth living.\n",
              "4  Edna Krabappel-Flanders  The polls will be open from now until the end ..."
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "caf6838463d56f79e92d87d5a3827fcd5f04fc54",
        "id": "NdZj5isjCMfz"
      },
      "source": [
        "The missing values comes from the part of the script where something happens, but with no dialogue. For instance \"(Springfield Elementary School: EXT. ELEMENTARY - SCHOOL PLAYGROUND - AFTERNOON)\""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "3a15727caeba1c8d10573456640d0b8b9f2f2e2d",
        "id": "eGtdk1E6CMf0",
        "outputId": "c3663272-4d87-4bec-ce70-293c3f140423",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        }
      },
      "source": [
        "df.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "raw_character_text    17814\n",
              "spoken_words          26459\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "885a555596d7484841ea54c94405d03d90572396",
        "id": "wNJOMpAECMf6"
      },
      "source": [
        "Removing the missing values:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "82cb38f176526679f66ee31e11cfe4f5eebdab51",
        "id": "4ivAc3q6CMf7",
        "outputId": "6446f61d-2df8-4bc5-a851-db148aa36810",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        }
      },
      "source": [
        "df = df.dropna().reset_index(drop=True)\n",
        "df.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 00:48:43: NumExpr defaulting to 2 threads.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "raw_character_text    0\n",
              "spoken_words          0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "7f07dca2a2656dcd9e0c315afa36af32a992eef7",
        "id": "KUtw6Y6fCMgA"
      },
      "source": [
        "## Cleaning:\n",
        "We are lemmatizing and removing the stopwords and non-alphabetic characters for each line of dialogue."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "b26a0c01c5701630d3951cfc808a9d944eea6371",
        "id": "zNyWt3fqCMgA"
      },
      "source": [
        "nlp = spacy.load('en', disable=['ner', 'parser']) # disabling Named Entity Recognition for speed\n",
        "\n",
        "def cleaning(doc):\n",
        "    # Lemmatizes and removes stopwords\n",
        "    # doc needs to be a spacy Doc object\n",
        "    txt = [token.lemma_ for token in doc if not token.is_stop]\n",
        "    # Word2Vec uses context words to learn the vector representation of a target word,\n",
        "    # if a sentence is only one or two words long,\n",
        "    # the benefit for the training is very small\n",
        "    if len(txt) > 2:\n",
        "        return ' '.join(txt)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "f686964722eede40e5961cd232aee7b6dd587bd1",
        "id": "2NkICLFsCMgE"
      },
      "source": [
        "Removes non-alphabetic characters:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "b45598934171607242ca7d50f8c5f7c91411aace",
        "id": "RWZqea-tCMgF"
      },
      "source": [
        "brief_cleaning = (re.sub(\"[^A-Za-z']+\", ' ', str(row)).lower() for row in df['spoken_words'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "2360160a7f326a32d56f2f18782d7ce2f4ac1def",
        "id": "vssPA6YYCMgK"
      },
      "source": [
        "Taking advantage of spaCy .pipe() attribute to speed-up the cleaning process:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "fa44ca458c970ca229426779e6ffcd46c2de313c",
        "id": "-I7MnhujCMgL",
        "outputId": "a286e79c-c67d-41f3-b6cc-f45854956f5f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "t = time()\n",
        "\n",
        "txt = [cleaning(doc) for doc in nlp.pipe(brief_cleaning, batch_size=5000, n_threads=-1)]\n",
        "\n",
        "print('Time to clean up everything: {} mins'.format(round((time() - t) / 60, 2)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Time to clean up everything: 2.18 mins\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "65ec76c60f9fe93bba6909f4e696f90e3e54710b",
        "id": "uRzkQ6s5CMgP"
      },
      "source": [
        "Put the results in a DataFrame to remove missing values and duplicates:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "57f1eb8382554bc592d48915a903230b5b6d6cf7",
        "id": "KmJfPiyMCMgQ",
        "outputId": "671028fa-5a1d-413f-bb19-ca9d205215be",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "df_clean = pd.DataFrame({'clean': txt})\n",
        "df_clean = df_clean.dropna().drop_duplicates()\n",
        "df_clean.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(85964, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "31b4a744059df490ddb47ab6cdec008dc929ede3",
        "id": "FEQMw-zTCMgU"
      },
      "source": [
        "## Bigrams:\n",
        "We are using Gensim Phrases package to automatically detect common phrases (bigrams) from a list of sentences.\n",
        "https://radimrehurek.com/gensim/models/phrases.html\n",
        "\n",
        "The main reason we do this is to catch words like \"mr_burns\" or \"bart_simpson\" !"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "af6d420284a0ff7a7407d4c526754ffe850d6170",
        "id": "W8AzWSVkCMgV",
        "outputId": "15872067-3351-4ebb-e19a-30c80074f63b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "from gensim.models.phrases import Phrases, Phraser"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 00:53:36: 'pattern' package not found; tag filters are not available for English\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "788aec3c82788101db25d4ca6105ee133fecae7c",
        "id": "CeBvolIjCMga"
      },
      "source": [
        "As `Phrases()` takes a list of list of words as input:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "f58487ff08d8812622fd7aef36139f1c850add18",
        "id": "JL1b9bAPCMgb"
      },
      "source": [
        "sent = [row.split() for row in df_clean['clean']]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "bb7766b322cbc1d3381912b890585eb249ac5304",
        "id": "BY8jOfn5CMge"
      },
      "source": [
        "Creates the relevant phrases from the list of sentences:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "8befad8c76c54bd2b831b0942a2f626f7d8a6dac",
        "id": "6r8PcCH5CMgf",
        "outputId": "1cda8176-2c52-43c0-cab7-e76e3944d91c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 370
        }
      },
      "source": [
        "phrases = Phrases(sent, min_count=30, progress_per=5000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 00:54:13: collecting all words and their counts\n",
            "INFO - 00:54:13: PROGRESS: at sentence #0, processed 0 words and 0 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #5000, processed 32921 words and 29784 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #10000, processed 63561 words and 52816 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #15000, processed 97114 words and 76600 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #20000, processed 130943 words and 99866 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #25000, processed 162450 words and 119483 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #30000, processed 192972 words and 138532 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #35000, processed 222000 words and 156174 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #40000, processed 249842 words and 172659 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #45000, processed 280058 words and 190278 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #50000, processed 311265 words and 208566 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #55000, processed 342412 words and 226058 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #60000, processed 373588 words and 243702 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #65000, processed 404897 words and 261116 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #70000, processed 436441 words and 278740 word types\n",
            "INFO - 00:54:13: PROGRESS: at sentence #75000, processed 467073 words and 295309 word types\n",
            "INFO - 00:54:14: PROGRESS: at sentence #80000, processed 497829 words and 311886 word types\n",
            "INFO - 00:54:14: PROGRESS: at sentence #85000, processed 530840 words and 327801 word types\n",
            "INFO - 00:54:14: collected 330804 word types from a corpus of 537160 words (unigram + bigrams) and 85964 sentences\n",
            "INFO - 00:54:14: using 330804 counts as vocab in Phrases<0 vocab, min_count=30, threshold=10.0, max_vocab_size=40000000>\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "45bae4a953f2ad8951e4efb234e1e357857a33b3",
        "id": "hr-6oz7jCMgi"
      },
      "source": [
        "The goal of Phraser() is to cut down memory consumption of Phrases(), by discarding model state not strictly needed for the bigram detection task:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "_kg_hide-input": true,
        "trusted": true,
        "_uuid": "b8ae81ba230013aefe7c584338de7376fedf6294",
        "id": "eSLKrIfsCMgj",
        "outputId": "c032153b-35fa-423f-ca69-ba6b81e763e3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "bigram = Phraser(phrases)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 00:54:27: source_vocab length 330804\n",
            "INFO - 00:54:30: Phraser built with 126 phrasegrams\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "4a58380f19d159688aeee665d1afb96289fdd4b8",
        "id": "AvNw1RGfCMgn"
      },
      "source": [
        "Transform the corpus based on the bigrams detected:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "8051b56890c147119db3df529d3cfd3cf675fdca",
        "id": "cj1yY_8bCMgo"
      },
      "source": [
        "sentences = bigram[sent]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "a4f81e8bb2c09a67b00cd24db28353eca8ae188c",
        "id": "2yLhX8puCMgr"
      },
      "source": [
        "## Most Frequent Words:\n",
        "Mainly a sanity check of the effectiveness of the lemmatization, removal of stopwords, and addition of bigrams."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "eeb8afe1cfcb7ba65bd14d657455600acacf39ba",
        "id": "TlpHyTRxCMgs",
        "outputId": "10488bc8-5dc2-45a4-bc2a-7b25e1f4d384",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "word_freq = defaultdict(int)\n",
        "for sent in sentences:\n",
        "    for i in sent:\n",
        "        word_freq[i] += 1\n",
        "len(word_freq)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "30178"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "5b010149150b2b2eaf332d79bcde0649b8a3c2b5",
        "id": "iDjp2fP9CMgw",
        "outputId": "cfc9f2cd-9950-44ea-ab34-ede03caccde4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "sorted(word_freq, key=word_freq.get, reverse=True)[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['oh', 'like', 'know', 'get', 'hey', 'think', 'right', 'look', 'want', 'come']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "500ab7b5c84dc006d7945f339c40725a82856fdf",
        "id": "xLN_aCyrCMgz"
      },
      "source": [
        "# Training the model\n",
        "## Gensim Word2Vec Implementation:\n",
        "We use Gensim implementation of word2vec: https://radimrehurek.com/gensim/models/word2vec.html"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "3269be205cadbad499aa87890893d92da6adc796",
        "id": "K5xaSpoPCMg0"
      },
      "source": [
        "import multiprocessing\n",
        "\n",
        "from gensim.models import Word2Vec"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "7c524bc49c41a6c37f9e754a38797c9501202090",
        "id": "Hxa-dB1CCMg4"
      },
      "source": [
        "## Why I seperate the training of the model in 3 steps:\n",
        "I prefer to separate the training in 3 distinctive steps for clarity and monitoring.\n",
        "1. `Word2Vec()`: \n",
        ">In this first step, I set up the parameters of the model one-by-one. <br>I do not supply the parameter `sentences`, and therefore leave the model uninitialized, purposefully.\n",
        "2. `.build_vocab()`: \n",
        ">Here it builds the vocabulary from a sequence of sentences and thus initialized the model. <br>With the loggings, I can follow the progress and even more important, the effect of `min_count` and `sample` on the word corpus. I noticed that these two parameters, and in particular `sample`, have a great influence over the performance of a model. Displaying both allows for a more accurate and an easier management of their influence.\n",
        "3. `.train()`:\n",
        ">Finally, trains the model.<br>\n",
        "The loggings here are mainly useful for monitoring, making sure that no threads are executed instantaneously."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "03488d9b68963579c96094aca88a302c9f2753a7",
        "id": "VUGhbwc2CMg6"
      },
      "source": [
        "cores = multiprocessing.cpu_count() # Count the number of cores in a computer"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WwnN80Fs5Ow_",
        "outputId": "b57ac6f5-95eb-496b-ea27-f27d1c0fae5f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "cores"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "89c305fcd163488441ac2ac6133678bd973b4419",
        "id": "i3Ja9MrFCMg-"
      },
      "source": [
        "## The parameters:\n",
        "\n",
        "* `min_count` <font color='purple'>=</font> <font color='green'>int</font> - Ignores all words with total absolute frequency lower than this - (2, 100)\n",
        "\n",
        "\n",
        "* `window` <font color='purple'>=</font> <font color='green'>int</font> - The maximum distance between the current and predicted word within a sentence. E.g. `window` words on the left and `window` words on the left of our target - (2, 10)\n",
        "\n",
        "\n",
        "* `size` <font color='purple'>=</font> <font color='green'>int</font> - Dimensionality of the feature vectors. - (50, 300)\n",
        "\n",
        "\n",
        "* `sample` <font color='purple'>=</font> <font color='green'>float</font> - The threshold for configuring which higher-frequency words are randomly downsampled. Highly influencial.  - (0, 1e-5)\n",
        "\n",
        "\n",
        "* `alpha` <font color='purple'>=</font> <font color='green'>float</font> - The initial learning rate - (0.01, 0.05)\n",
        "\n",
        "\n",
        "* `min_alpha` <font color='purple'>=</font> <font color='green'>float</font> - Learning rate will linearly drop to `min_alpha` as training progresses. To set it: alpha - (min_alpha * epochs) ~ 0.00\n",
        "\n",
        "\n",
        "* `negative` <font color='purple'>=</font> <font color='green'>int</font> - If > 0, negative sampling will be used, the int for negative specifies how many \"noise words\" should be drown. If set to 0, no negative sampling is used. - (5, 20)\n",
        "\n",
        "\n",
        "* `workers` <font color='purple'>=</font> <font color='green'>int</font> - Use these many worker threads to train the model (=faster training with multicore machines)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "ad619db82c219d6cb81fad516563feb0c4d474cd",
        "id": "KcCB55IcCMg-"
      },
      "source": [
        "w2v_model = Word2Vec(min_count=20,\n",
        "                     window=2,\n",
        "                     size=300,\n",
        "                     sample=6e-5, \n",
        "                     alpha=0.03, \n",
        "                     min_alpha=0.0007, \n",
        "                     negative=20,\n",
        "                     workers=cores-1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "d7e9f1bd338f9e15647b5209ffd8fbb131cd7ee5",
        "id": "hJvpr7rNCMhB"
      },
      "source": [
        "## Building the Vocabulary Table:\n",
        "Word2Vec requires us to build the vocabulary table (simply digesting all the words and filtering out the unique words, and doing some basic counts on them):"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "66358ad743e05e17dfbed3899af9c41056143daa",
        "id": "VG6y636GCMhD",
        "outputId": "37ce29cb-db5d-4d1f-f7e7-8c13f188381e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        }
      },
      "source": [
        "t = time()\n",
        "\n",
        "w2v_model.build_vocab(sentences, progress_per=5000)\n",
        "\n",
        "print('Time to build vocab: {} mins'.format(round((time() - t) / 60, 2)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 00:59:10: collecting all words and their counts\n",
            "INFO - 00:59:10: PROGRESS: at sentence #0, processed 0 words, keeping 0 word types\n",
            "INFO - 00:59:10: PROGRESS: at sentence #5000, processed 32001 words, keeping 6389 word types\n",
            "INFO - 00:59:10: PROGRESS: at sentence #10000, processed 61718 words, keeping 9558 word types\n",
            "INFO - 00:59:10: PROGRESS: at sentence #15000, processed 94369 words, keeping 12119 word types\n",
            "INFO - 00:59:10: PROGRESS: at sentence #20000, processed 127351 words, keeping 14506 word types\n",
            "INFO - 00:59:11: PROGRESS: at sentence #25000, processed 158041 words, keeping 16095 word types\n",
            "INFO - 00:59:11: PROGRESS: at sentence #30000, processed 187829 words, keeping 17619 word types\n",
            "INFO - 00:59:11: PROGRESS: at sentence #35000, processed 216190 words, keeping 19062 word types\n",
            "INFO - 00:59:11: PROGRESS: at sentence #40000, processed 243332 words, keeping 20385 word types\n",
            "INFO - 00:59:11: PROGRESS: at sentence #45000, processed 272774 words, keeping 21610 word types\n",
            "INFO - 00:59:11: PROGRESS: at sentence #50000, processed 303182 words, keeping 22878 word types\n",
            "INFO - 00:59:11: PROGRESS: at sentence #55000, processed 333519 words, keeping 24057 word types\n",
            "INFO - 00:59:11: PROGRESS: at sentence #60000, processed 363940 words, keeping 25200 word types\n",
            "INFO - 00:59:11: PROGRESS: at sentence #65000, processed 394543 words, keeping 26255 word types\n",
            "INFO - 00:59:11: PROGRESS: at sentence #70000, processed 425408 words, keeping 27401 word types\n",
            "INFO - 00:59:11: PROGRESS: at sentence #75000, processed 455370 words, keeping 28326 word types\n",
            "INFO - 00:59:12: PROGRESS: at sentence #80000, processed 485464 words, keeping 29275 word types\n",
            "INFO - 00:59:12: PROGRESS: at sentence #85000, processed 517570 words, keeping 30026 word types\n",
            "INFO - 00:59:12: collected 30178 word types from a corpus of 523700 raw words and 85964 sentences\n",
            "INFO - 00:59:12: Loading a fresh vocabulary\n",
            "INFO - 00:59:12: effective_min_count=20 retains 3319 unique words (10% of original 30178, drops 26859)\n",
            "INFO - 00:59:12: effective_min_count=20 leaves 437324 word corpus (83% of original 523700, drops 86376)\n",
            "INFO - 00:59:12: deleting the raw counts dictionary of 30178 items\n",
            "INFO - 00:59:12: sample=6e-05 downsamples 1200 most-common words\n",
            "INFO - 00:59:12: downsampling leaves estimated 199161 word corpus (45.5% of prior 437324)\n",
            "INFO - 00:59:12: estimated required memory for 3319 words and 300 dimensions: 9625100 bytes\n",
            "INFO - 00:59:12: resetting layer weights\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Time to build vocab: 0.04 mins\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "63260d82061abb47db7f2f8b23e07ec629adf5a9",
        "id": "jQb5Yv6dCMhG"
      },
      "source": [
        "## Training of the model:\n",
        "_Parameters of the training:_\n",
        "* `total_examples` <font color='purple'>=</font> <font color='green'>int</font> - Count of sentences;\n",
        "* `epochs` <font color='purple'>=</font> <font color='green'>int</font> - Number of iterations (epochs) over the corpus - [10, 20, 30]"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "07a2a047e701e512fd758edff186daadaeea6461",
        "id": "QBspi-LDCMhG",
        "outputId": "e18c024f-59dc-45b9-d8eb-14fa75d0beab",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "t = time()\n",
        "\n",
        "w2v_model.train(sentences, total_examples=w2v_model.corpus_count, epochs=30, report_delay=1)\n",
        "\n",
        "print('Time to train the model: {} mins'.format(round((time() - t) / 60, 2)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 01:00:31: training model with 1 workers on 3319 vocabulary and 300 features, using sg=0 hs=0 sample=6e-05 negative=20 window=2\n",
            "INFO - 01:00:32: EPOCH 1 - PROGRESS: at 43.67% examples, 85538 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:33: EPOCH 1 - PROGRESS: at 91.98% examples, 89933 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:34: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:34: EPOCH - 1 : training on 523700 raw words (198820 effective words) took 2.2s, 90891 effective words/s\n",
            "INFO - 01:00:35: EPOCH 2 - PROGRESS: at 47.87% examples, 91835 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:36: EPOCH 2 - PROGRESS: at 95.68% examples, 93638 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:36: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:36: EPOCH - 2 : training on 523700 raw words (199218 effective words) took 2.1s, 94274 effective words/s\n",
            "INFO - 01:00:37: EPOCH 3 - PROGRESS: at 47.87% examples, 93202 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:38: EPOCH 3 - PROGRESS: at 91.98% examples, 89790 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:38: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:38: EPOCH - 3 : training on 523700 raw words (199222 effective words) took 2.2s, 91100 effective words/s\n",
            "INFO - 01:00:39: EPOCH 4 - PROGRESS: at 47.87% examples, 92460 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:40: EPOCH 4 - PROGRESS: at 95.68% examples, 93434 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:40: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:40: EPOCH - 4 : training on 523700 raw words (199150 effective words) took 2.1s, 93980 effective words/s\n",
            "INFO - 01:00:41: EPOCH 5 - PROGRESS: at 47.87% examples, 91539 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:42: EPOCH 5 - PROGRESS: at 95.68% examples, 92803 words/s, in_qsize 1, out_qsize 0\n",
            "INFO - 01:00:42: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:42: EPOCH - 5 : training on 523700 raw words (199540 effective words) took 2.1s, 93591 effective words/s\n",
            "INFO - 01:00:43: EPOCH 6 - PROGRESS: at 47.87% examples, 92019 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:44: EPOCH 6 - PROGRESS: at 93.81% examples, 90401 words/s, in_qsize 1, out_qsize 0\n",
            "INFO - 01:00:44: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:44: EPOCH - 6 : training on 523700 raw words (199462 effective words) took 2.2s, 90922 effective words/s\n",
            "INFO - 01:00:45: EPOCH 7 - PROGRESS: at 47.87% examples, 91043 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:46: EPOCH 7 - PROGRESS: at 95.68% examples, 93117 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:47: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:47: EPOCH - 7 : training on 523700 raw words (199000 effective words) took 2.1s, 93619 effective words/s\n",
            "INFO - 01:00:48: EPOCH 8 - PROGRESS: at 45.81% examples, 90536 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:49: EPOCH 8 - PROGRESS: at 95.68% examples, 93355 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:49: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:49: EPOCH - 8 : training on 523700 raw words (199266 effective words) took 2.1s, 93829 effective words/s\n",
            "INFO - 01:00:50: EPOCH 9 - PROGRESS: at 47.87% examples, 92289 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:51: EPOCH 9 - PROGRESS: at 91.98% examples, 89659 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:51: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:51: EPOCH - 9 : training on 523700 raw words (199201 effective words) took 2.2s, 91244 effective words/s\n",
            "INFO - 01:00:52: EPOCH 10 - PROGRESS: at 47.87% examples, 91919 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:53: EPOCH 10 - PROGRESS: at 95.68% examples, 93538 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:53: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:53: EPOCH - 10 : training on 523700 raw words (199075 effective words) took 2.1s, 93990 effective words/s\n",
            "INFO - 01:00:54: EPOCH 11 - PROGRESS: at 47.87% examples, 92023 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:55: EPOCH 11 - PROGRESS: at 95.68% examples, 92495 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:55: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:55: EPOCH - 11 : training on 523700 raw words (199385 effective words) took 2.1s, 93082 effective words/s\n",
            "INFO - 01:00:56: EPOCH 12 - PROGRESS: at 47.87% examples, 91484 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:57: EPOCH 12 - PROGRESS: at 91.98% examples, 89471 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:00:57: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:00:57: EPOCH - 12 : training on 523700 raw words (198819 effective words) took 2.2s, 90497 effective words/s\n",
            "INFO - 01:00:58: EPOCH 13 - PROGRESS: at 47.87% examples, 90680 words/s, in_qsize 1, out_qsize 0\n",
            "INFO - 01:00:59: EPOCH 13 - PROGRESS: at 95.68% examples, 92720 words/s, in_qsize 1, out_qsize 0\n",
            "INFO - 01:01:00: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:00: EPOCH - 13 : training on 523700 raw words (199107 effective words) took 2.1s, 93576 effective words/s\n",
            "INFO - 01:01:01: EPOCH 14 - PROGRESS: at 47.87% examples, 92244 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:02: EPOCH 14 - PROGRESS: at 95.68% examples, 93575 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:02: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:02: EPOCH - 14 : training on 523700 raw words (199018 effective words) took 2.1s, 94233 effective words/s\n",
            "INFO - 01:01:03: EPOCH 15 - PROGRESS: at 47.87% examples, 92437 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:04: EPOCH 15 - PROGRESS: at 91.98% examples, 89324 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:04: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:04: EPOCH - 15 : training on 523700 raw words (199635 effective words) took 2.2s, 90794 effective words/s\n",
            "INFO - 01:01:05: EPOCH 16 - PROGRESS: at 47.87% examples, 91730 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:06: EPOCH 16 - PROGRESS: at 95.68% examples, 93320 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:06: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:06: EPOCH - 16 : training on 523700 raw words (199205 effective words) took 2.1s, 93924 effective words/s\n",
            "INFO - 01:01:07: EPOCH 17 - PROGRESS: at 47.87% examples, 91664 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:08: EPOCH 17 - PROGRESS: at 95.68% examples, 93613 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:08: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:08: EPOCH - 17 : training on 523700 raw words (199196 effective words) took 2.1s, 94278 effective words/s\n",
            "INFO - 01:01:09: EPOCH 18 - PROGRESS: at 47.87% examples, 92874 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:10: EPOCH 18 - PROGRESS: at 91.98% examples, 89646 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:10: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:10: EPOCH - 18 : training on 523700 raw words (199097 effective words) took 2.2s, 90772 effective words/s\n",
            "INFO - 01:01:11: EPOCH 19 - PROGRESS: at 47.87% examples, 91751 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:12: EPOCH 19 - PROGRESS: at 95.68% examples, 92952 words/s, in_qsize 1, out_qsize 0\n",
            "INFO - 01:01:12: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:12: EPOCH - 19 : training on 523700 raw words (199697 effective words) took 2.1s, 93792 effective words/s\n",
            "INFO - 01:01:13: EPOCH 20 - PROGRESS: at 47.87% examples, 92937 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:14: EPOCH 20 - PROGRESS: at 95.68% examples, 93158 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:15: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:15: EPOCH - 20 : training on 523700 raw words (199491 effective words) took 2.1s, 93785 effective words/s\n",
            "INFO - 01:01:16: EPOCH 21 - PROGRESS: at 47.87% examples, 91959 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:17: EPOCH 21 - PROGRESS: at 91.98% examples, 89062 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:17: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:17: EPOCH - 21 : training on 523700 raw words (198582 effective words) took 2.2s, 89944 effective words/s\n",
            "INFO - 01:01:18: EPOCH 22 - PROGRESS: at 47.87% examples, 91599 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:19: EPOCH 22 - PROGRESS: at 95.68% examples, 93437 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:19: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:19: EPOCH - 22 : training on 523700 raw words (199255 effective words) took 2.1s, 93624 effective words/s\n",
            "INFO - 01:01:20: EPOCH 23 - PROGRESS: at 47.87% examples, 91011 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:21: EPOCH 23 - PROGRESS: at 95.68% examples, 92075 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:21: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:21: EPOCH - 23 : training on 523700 raw words (199012 effective words) took 2.1s, 93125 effective words/s\n",
            "INFO - 01:01:22: EPOCH 24 - PROGRESS: at 43.67% examples, 85318 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:23: EPOCH 24 - PROGRESS: at 91.98% examples, 88726 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:23: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:23: EPOCH - 24 : training on 523700 raw words (198827 effective words) took 2.2s, 89547 effective words/s\n",
            "INFO - 01:01:24: EPOCH 25 - PROGRESS: at 45.81% examples, 89764 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:25: EPOCH 25 - PROGRESS: at 93.81% examples, 91590 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:25: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:25: EPOCH - 25 : training on 523700 raw words (199315 effective words) took 2.1s, 92825 effective words/s\n",
            "INFO - 01:01:26: EPOCH 26 - PROGRESS: at 45.81% examples, 90118 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:27: EPOCH 26 - PROGRESS: at 93.81% examples, 92473 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:28: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:28: EPOCH - 26 : training on 523700 raw words (199170 effective words) took 2.1s, 93077 effective words/s\n",
            "INFO - 01:01:29: EPOCH 27 - PROGRESS: at 43.67% examples, 84114 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:30: EPOCH 27 - PROGRESS: at 91.98% examples, 89459 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:30: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:30: EPOCH - 27 : training on 523700 raw words (199503 effective words) took 2.2s, 90620 effective words/s\n",
            "INFO - 01:01:31: EPOCH 28 - PROGRESS: at 47.87% examples, 93347 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:32: EPOCH 28 - PROGRESS: at 95.68% examples, 94237 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:32: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:32: EPOCH - 28 : training on 523700 raw words (199304 effective words) took 2.1s, 94869 effective words/s\n",
            "INFO - 01:01:33: EPOCH 29 - PROGRESS: at 47.87% examples, 93180 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:34: EPOCH 29 - PROGRESS: at 91.98% examples, 90377 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:34: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:34: EPOCH - 29 : training on 523700 raw words (199329 effective words) took 2.2s, 91018 effective words/s\n",
            "INFO - 01:01:35: EPOCH 30 - PROGRESS: at 45.81% examples, 90711 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:36: EPOCH 30 - PROGRESS: at 93.81% examples, 92532 words/s, in_qsize 0, out_qsize 0\n",
            "INFO - 01:01:36: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:01:36: EPOCH - 30 : training on 523700 raw words (198902 effective words) took 2.1s, 93242 effective words/s\n",
            "INFO - 01:01:36: training on a 15711000 raw words (5975803 effective words) took 64.8s, 92193 effective words/s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Time to train the model: 1.08 mins\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "48e12768512b82c2d5cf6a543e3a9f2515699a22",
        "id": "UGSwzXlgCMhL"
      },
      "source": [
        "As we do not plan to train the model any further, we are calling init_sims(), which will make the model much more memory-efficient:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "34dd51c7f2f39d016b982ef81e4df576f6b31bcb",
        "id": "HepJh0HfCMhL",
        "outputId": "5c64d22d-2f85-4b5e-ead3-e31eaaded505",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "w2v_model.init_sims(replace=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 01:02:09: precomputing L2-norms of word weight vectors\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "a420d5a98eb860cff1f4bbac8cbe2054459b6200",
        "id": "obknXBm7CMhO"
      },
      "source": [
        "# Exploring the model\n",
        "## Most similar to:\n",
        "\n",
        "Here, we will ask our model to find the word most similar to some of the most iconic characters of the Simpsons!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "a8f3cfd8ac88978a4df31c90afa194bd6fa4f3f5",
        "id": "uzHx7gYFCMhP"
      },
      "source": [
        "<img src=\"https://vignette.wikia.nocookie.net/simpsons/images/0/02/Homer_Simpson_2006.png/revision/latest?cb=20091207194310\" alt=\"drawing\" width=\"130\"/>\n",
        "\n",
        "Let's see what we get for the show's main character:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "339207a733a1ac42fe60e32a29f9e5d5ca0a9275",
        "id": "55v7L3a7CMhP",
        "outputId": "e075ca98-9235-4037-c65f-0f535b3ce46f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "source": [
        "w2v_model.wv.most_similar(positive=[\"homer\"])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('bongo', 0.7755978107452393),\n",
              " ('marge', 0.7748335599899292),\n",
              " ('rude', 0.7687016129493713),\n",
              " ('wife', 0.7581051588058472),\n",
              " ('snuggle', 0.7554733753204346),\n",
              " ('sorry', 0.753796398639679),\n",
              " ('sweetheart', 0.7373628616333008),\n",
              " ('gee', 0.7355551719665527),\n",
              " ('listen', 0.7270897626876831),\n",
              " ('worry', 0.7254608869552612)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "3b6686e6fa956a98450259b063b4cf51019a6d0b",
        "id": "nY9cKeBCCMhT"
      },
      "source": [
        "_A small precision here:_<br>\n",
        "The dataset is the Simpsons' lines of dialogue; therefore, when we look at the most similar words from \"homer\" we do **not** necessary get his family members, personality traits, or even his most quotable words. No, we get what other characters (as Homer does not often refers to himself at the 3rd person) said along with \"homer\", such as how he feels or looks (\"depressed\"), where he is (\"hammock\"), or with whom (\"marge\").\n",
        "\n",
        "Let's see what the bigram \"homer_simpson\" gives us by comparison:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "23e5149b19f18f4f2f456d4c72afc5c188bcfba4",
        "id": "Hucu_tBPCMhT",
        "outputId": "1c331436-b407-497e-fd3f-eb3dbdef832b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "source": [
        "w2v_model.wv.most_similar(positive=[\"homer_simpson\"])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('congratulation', 0.7873159050941467),\n",
              " ('council', 0.762424111366272),\n",
              " ('recent', 0.7549648880958557),\n",
              " ('easily', 0.7527613639831543),\n",
              " ('governor', 0.751689076423645),\n",
              " ('defeat', 0.741349458694458),\n",
              " ('erotic', 0.7386001944541931),\n",
              " ('robert', 0.7350441813468933),\n",
              " ('pleased', 0.7336002588272095),\n",
              " ('hutz', 0.7316666841506958)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "0e3e121e022f2f659cf97bba42cecd3f3c9afb01",
        "id": "gceKl3xoCMhW"
      },
      "source": [
        "<img src=\"https://vignette.wikia.nocookie.net/simpsons/images/0/0b/Marge_Simpson.png/revision/latest?cb=20180626055729\" alt=\"drawing\" width=\"150\"/>\n",
        "\n",
        "What about Marge now?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "22595f98c675a9697243b7e826b2840e5fc3e5f5",
        "id": "1nQmaxmACMhX",
        "outputId": "71a93457-49df-4e8a-85c8-383b9de9ec7b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "source": [
        "w2v_model.wv.most_similar(positive=[\"marge\"])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('convince', 0.7901515960693359),\n",
              " ('sorry', 0.7804840803146362),\n",
              " ('homer', 0.7748335599899292),\n",
              " ('rude', 0.7736550569534302),\n",
              " ('fault', 0.7611100077629089),\n",
              " ('raccoon', 0.7573060393333435),\n",
              " ('loving', 0.7548959255218506),\n",
              " ('darling', 0.7532001733779907),\n",
              " ('attract', 0.7527567148208618),\n",
              " ('becky', 0.7524241209030151)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "2b4857ff1159695c72c22417cf52dc84e0dfc9ea",
        "id": "hXqW0NytCMhZ"
      },
      "source": [
        "<img src=\"https://vignette.wikia.nocookie.net/simpsons/images/6/65/Bart_Simpson.png/revision/latest?cb=20180319061933\" alt=\"drawing\" width=\"100\"/>\n",
        "\n",
        "Let's check Bart now:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "ac9ba47738e596dce6552099e76f303f28577943",
        "id": "frY_Wb7OCMha",
        "outputId": "75a833bc-3c7d-41e5-88b2-22cb25b743d2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "source": [
        "w2v_model.wv.most_similar(positive=[\"bart\"])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('lisa', 0.8460124135017395),\n",
              " ('homework', 0.8015649318695068),\n",
              " ('surprised', 0.798308253288269),\n",
              " ('mom', 0.795115053653717),\n",
              " ('upset', 0.7910062670707703),\n",
              " ('substitute', 0.7862980365753174),\n",
              " ('typical', 0.7764096856117249),\n",
              " ('convince', 0.7704870700836182),\n",
              " ('strangle', 0.7641240358352661),\n",
              " ('fault', 0.763558030128479)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "c9afcf59e71f797f8e4d6d4b4ce39e359b19a450",
        "id": "qtT7mOn8CMhd"
      },
      "source": [
        "Looks like it is making sense!\n",
        "\n",
        "<img src=\"https://vignette.wikia.nocookie.net/simpsons/images/9/9d/Groundskeeper_Willie.png/revision/latest?cb=20130424154035\" alt=\"drawing\" width=\"150\"/>\n",
        "\n",
        "Willie the groundskeeper for the last one:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_LDuigmfSK1D",
        "outputId": "2969f006-30cc-46af-8969-4dbe8deccf7d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "source": [
        "w2v_model.wv.most_similar(positive=[\"willie\"])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('groundskeeper', 0.9433830976486206),\n",
              " ('puke', 0.6043393015861511),\n",
              " ('oi', 0.6005657911300659),\n",
              " ('ach', 0.5783272385597229),\n",
              " ('arrr', 0.5752402544021606),\n",
              " ('grass', 0.5358684062957764),\n",
              " (\"'_tis\", 0.5342565774917603),\n",
              " ('aye', 0.531267523765564),\n",
              " ('seymour', 0.5264034271240234),\n",
              " ('remove', 0.5248491764068604)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4MSX-atdSKyZ"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "d8b5937dfd7584f168a33060c435036cad5b390b",
        "id": "jl-4HFHcCMhd"
      },
      "source": [
        "## Similarities:\n",
        "Here, we will see how similar are two words to each other :"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "349828078b5a438d93e5494478e88095913dc58e",
        "id": "V831L5vlCMhg",
        "outputId": "819ab5a3-208e-489e-b78e-45d49b3fdb50",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "w2v_model.wv.similarity('maggie', 'baby')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.72010666"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "7d7842e5b5cab743db56ff120d75ad3974c429d8",
        "id": "4tyC1u_-CMhk"
      },
      "source": [
        "Maggie is indeed the most renown baby in the Simpsons!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "9ee5e2532214b20fef0a597bc5ad355762fcc281",
        "id": "VDPH2hShCMhk",
        "outputId": "712cd38c-0f48-4e5d-f15f-d060b9ecdf65",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "w2v_model.wv.similarity('bart', 'nelson')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.65428346"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "08a999d758ac687d626b631a8ce393eaa26f41e7",
        "id": "J2aRfIeUCMhn"
      },
      "source": [
        "Bart and Nelson, though friends, are not that close, makes sense!\n",
        "\n",
        "## Odd-One-Out:\n",
        "\n",
        "Here, we ask our model to give us the word that does not belong to the list!\n",
        "\n",
        "Between Jimbo, Milhouse, and Kearney, who is the one who is not a bully?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "d982e44d9c212b5ee09bcaebd050a725ab5e508e",
        "id": "lnHnV-PoCMho",
        "outputId": "b8a4e2b4-251e-4afe-fc06-321644d8a2a9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 139
        }
      },
      "source": [
        "w2v_model.wv.doesnt_match(['jimbo', 'milhouse', 'kearney'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING - 01:06:43: vectors for words {'kearney'} are not present in the model, ignoring these words\n",
            "/usr/local/lib/python3.6/dist-packages/gensim/models/keyedvectors.py:895: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n",
            "  vectors = vstack(self.word_vec(word, use_norm=True) for word in used_words).astype(REAL)\n",
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'jimbo'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "12d3c035c89718e70c193f095b46e38dccef6b0d",
        "id": "ZBzayfPyCMhq"
      },
      "source": [
        "Milhouse of course!\n",
        "<img src=\"https://vignette.wikia.nocookie.net/simpsons/images/9/91/Milhouse_Van_Houten_2.png/revision/latest?cb=20180429212659\" alt=\"drawing\" width=\"150\"/>\n",
        "\n",
        "What if we compared the friendship between Nelson, Bart, and Milhouse?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "cafd4a7bec6d6255ea3f5f06df951546c0d783a9",
        "id": "uxvKYD7ICMhq",
        "outputId": "8679fdf5-7cc0-4187-ff83-17b9c4027a38",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "source": [
        "w2v_model.wv.doesnt_match([\"nelson\", \"bart\", \"milhouse\"])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/models/keyedvectors.py:895: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n",
            "  vectors = vstack(self.word_vec(word, use_norm=True) for word in used_words).astype(REAL)\n",
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'nelson'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "01c0148dc758db74ed8078ca54e8393ada090c8c",
        "id": "7YLpgXrzCMhs"
      },
      "source": [
        "Seems like Nelson is the odd one here!\n",
        "\n",
        "<img src=\"https://vignette.wikia.nocookie.net/simpsons/images/4/40/Picture0003.jpg/revision/latest?cb=20110623042517\" alt=\"drawing\" width=\"200\"/>\n",
        "\n",
        "Last but not least, how is the relationship between Homer and his two sister-in-laws?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "445912f7d89b3cb1550926be161d134e6689f54f",
        "id": "KBJXhvbNCMht",
        "outputId": "1d5186d3-c50f-4323-c81a-e0a4156fe185",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "source": [
        "w2v_model.wv.doesnt_match(['homer', 'patty', 'selma'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/models/keyedvectors.py:895: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n",
            "  vectors = vstack(self.word_vec(word, use_norm=True) for word in used_words).astype(REAL)\n",
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'homer'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "df95cdff693e843ab4b4c174fea24029447573cd",
        "id": "Yqwv9m9wCMhv"
      },
      "source": [
        "Damn, they really do not like you Homer!\n",
        "\n",
        "## Analogy difference:\n",
        "Which word is to woman as homer is to marge?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wghxdSs77Xzs"
      },
      "source": [
        "woman ==> queen\n",
        "\n",
        "man ==> ?\n",
        "\n",
        "king"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "812961e79dde9f2032f708755ca287c0aef838d0",
        "id": "y5r4tasWCMhw",
        "outputId": "03e2e46d-1799-44e8-e981-d43a899eb87e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        }
      },
      "source": [
        "w2v_model.wv.most_similar(positive=[\"man\", \"homer\"], negative=[\"bart\"], topn=3)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('compliment', 0.5516815185546875),\n",
              " ('woman', 0.5471252202987671),\n",
              " ('indians', 0.5431786775588989)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "5a4ff4a8c8c582c6d9c704a042e8cc5d18b7bd6c",
        "id": "paIUXMwVCMhy"
      },
      "source": [
        "\"man\" comes at the first position, that looks about right!\n",
        "\n",
        "Which word is to woman as bart is to man?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "4cfef57b94b635abb58a4ff191785506c78ec9d9",
        "id": "mBp6N_zDCMhy",
        "outputId": "b6fb7f0d-d6aa-44c2-8e92-8c91a967dfc5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        }
      },
      "source": [
        "w2v_model.wv.most_similar(positive=[\"woman\", \"bart\"], negative=[\"man\"], topn=3)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('lisa', 0.7551329135894775),\n",
              " ('upset', 0.7494387626647949),\n",
              " ('parent', 0.7369980812072754)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "ef520bd7dd974d14afcb8e69266579ac0b703714",
        "id": "9KTFwepHCMh1"
      },
      "source": [
        "Lisa is Bart's sister, her male counterpart!\n",
        "<img src=\"https://vignette.wikia.nocookie.net/simpsons/images/5/57/Lisa_Simpson2.png/revision/latest?cb=20180319000458\" alt=\"drawing\" width=\"100\"/>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "773c0acc8750ba8e728ff261f2e9ec39694c245c",
        "id": "S9weBmETCMh2"
      },
      "source": [
        "### t-SNE visualizations:\n",
        "t-SNE is a non-linear dimensionality reduction algorithm that attempts to represent high-dimensional data and the underlying relationships between vectors in a lower-dimensional space.<br>\n",
        "Here is a good tutorial on it: https://medium.com/@luckylwk/visualising-high-dimensional-datasets-using-pca-and-t-sne-in-python-8ef87e7915b"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "27ec46110042fc28da900b1b344ae4e0692d5dc2",
        "id": "5nOI6-iRCMh2"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        " \n",
        "import seaborn as sns\n",
        "sns.set_style(\"darkgrid\")\n",
        "\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.manifold import TSNE"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "22693eaa25253b38cee3c5cd5db6b6fdddb575a4",
        "id": "lZfuaYa9CMh5"
      },
      "source": [
        "Our goal in this section is to plot our 300 dimensions vectors into 2 dimensional graphs, and see if we can spot interesting patterns.<br>\n",
        "For that we are going to use t-SNE implementation from scikit-learn.\n",
        "\n",
        "To make the visualizations more relevant, we will look at the relationships between a query word (in <font color='red'>**red**</font>), its most similar words in the model (in <font color=\"blue\">**blue**</font>), and other words from the vocabulary (in <font color='green'>**green**</font>)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "489a7d160dcd92da0ce42a3b5b461368c9ffe5f1",
        "id": "zQS1wA_mCMh5"
      },
      "source": [
        "def tsnescatterplot(model, word, list_names):\n",
        "    \"\"\" Plot in seaborn the results from the t-SNE dimensionality reduction algorithm of the vectors of a query word,\n",
        "    its list of most similar words, and a list of words.\n",
        "    \"\"\"\n",
        "    arrays = np.empty((0, 300), dtype='f')\n",
        "    word_labels = [word]\n",
        "    color_list  = ['red']\n",
        "\n",
        "    # adds the vector of the query word\n",
        "    arrays = np.append(arrays, model.wv.__getitem__([word]), axis=0)\n",
        "    \n",
        "    # gets list of most similar words\n",
        "    close_words = model.wv.most_similar([word])\n",
        "    \n",
        "    # adds the vector for each of the closest words to the array\n",
        "    for wrd_score in close_words:\n",
        "        wrd_vector = model.wv.__getitem__([wrd_score[0]])\n",
        "        word_labels.append(wrd_score[0])\n",
        "        color_list.append('blue')\n",
        "        arrays = np.append(arrays, wrd_vector, axis=0)\n",
        "    \n",
        "    # adds the vector for each of the words from list_names to the array\n",
        "    for wrd in list_names:\n",
        "        wrd_vector = model.wv.__getitem__([wrd])\n",
        "        word_labels.append(wrd)\n",
        "        color_list.append('green')\n",
        "        arrays = np.append(arrays, wrd_vector, axis=0)\n",
        "        \n",
        "    # Reduces the dimensionality from 300 to 15 dimensions with PCA\n",
        "    reduc = PCA(n_components=15).fit_transform(arrays)\n",
        "    \n",
        "    # Finds t-SNE coordinates for 2 dimensions\n",
        "    np.set_printoptions(suppress=True)\n",
        "    \n",
        "    Y = TSNE(n_components=2, random_state=0, perplexity=15).fit_transform(reduc)\n",
        "    \n",
        "    # Sets everything up to plot\n",
        "    df = pd.DataFrame({'x': [x for x in Y[:, 0]],\n",
        "                       'y': [y for y in Y[:, 1]],\n",
        "                       'words': word_labels,\n",
        "                       'color': color_list})\n",
        "    \n",
        "    fig, _ = plt.subplots()\n",
        "    fig.set_size_inches(9, 9)\n",
        "    \n",
        "    # Basic plot\n",
        "    p1 = sns.regplot(data=df,\n",
        "                     x=\"x\",\n",
        "                     y=\"y\",\n",
        "                     fit_reg=False,\n",
        "                     marker=\"o\",\n",
        "                     scatter_kws={'s': 40,\n",
        "                                  'facecolors': df['color']\n",
        "                                 }\n",
        "                    )\n",
        "    \n",
        "    # Adds annotations one by one with a loop\n",
        "    for line in range(0, df.shape[0]):\n",
        "         p1.text(df[\"x\"][line],\n",
        "                 df['y'][line],\n",
        "                 '  ' + df[\"words\"][line].title(),\n",
        "                 horizontalalignment='left',\n",
        "                 verticalalignment='bottom', size='medium',\n",
        "                 color=df['color'][line],\n",
        "                 weight='normal'\n",
        "                ).set_size(15)\n",
        "\n",
        "    \n",
        "    plt.xlim(Y[:, 0].min()-50, Y[:, 0].max()+50)\n",
        "    plt.ylim(Y[:, 1].min()-50, Y[:, 1].max()+50)\n",
        "            \n",
        "    plt.title('t-SNE visualization for {}'.format(word.title()))\n",
        "    "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "18d788b2a92f94771a5f9485a885d44dfba62a94",
        "id": "uSqoz99hCMh8",
        "outputId": "a42e33f8-16b6-496f-d661-4f6555d9986c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        }
      },
      "source": [
        "tsnescatterplot(w2v_model, 'bart', ['dog', 'bird', 'ah', 'maude', 'bob', 'mel', 'apu', 'duff'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 648x648 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "c73fc2faaf0baecc84f02a97b50cb9ccefa48686",
        "id": "RsNQWxTpCMh-"
      },
      "source": [
        "Interestingly, the 10 most similar words to Homer ends up around him, so does Apu and (sideshow) Bob, two recurrent characters.\n",
        "\n",
        "## 10 Most similar words vs. 10 Most dissimilar\n",
        "\n",
        "This time, let's compare where the vector representation of Maggie and her 10 most similar words from the model lies compare to the vector representation of the 10 most dissimilar words to Maggie:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "10c77b072f7c281f2be919341be116565c20d8a8",
        "id": "xIqMYrMTCMh_",
        "outputId": "79e08969-43d1-4331-a317-6e63a5ef0a80",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        }
      },
      "source": [
        "tsnescatterplot(w2v_model, 'maggie', [i[0] for i in w2v_model.wv.most_similar(negative=[\"maggie\"])])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 648x648 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_uuid": "87315bfbaceb3733bd7af035db6c59cfc4b1ba7f",
        "id": "XLRyiwQMCMiB"
      },
      "source": [
        "Neat! Maggie and her most similar words form a distinctive cluster from the most dissimilar words, it is a really encouraging plot!\n",
        "\n",
        "## 10 Most similar words vs. 11th to 20th Most similar words:\n",
        "\n",
        "Finally, we are going to plot the most similar words to Maggie ranked 1st to 10th versus the ones ranked 11th to 20th:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "_uuid": "e6f0bc598922f4f2cd17d2511560242a3c35fdd9",
        "id": "nsg22kzMCMiC",
        "outputId": "97296576-921a-48a1-bbc2-97e1072699a0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        }
      },
      "source": [
        "tsnescatterplot(w2v_model, \"apu\", [t[0] for t in w2v_model.wv.most_similar(positive=[\"maggie\"], topn=20)][10:])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 648x648 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gueSkfyM9h0b"
      },
      "source": [
        "# Assignment\n",
        "\n",
        "This time, we have an assignment too. You will use the \"Financial news\" dataset we used for the last assignment. You need to complete the following tasks:\n",
        "\n",
        "- Download the dataset, upload it to Google Drive and make it accessible from your Jupyter notebook\n",
        "- Preprocess the data as done in this lab\n",
        "- Train a Word2Vec as done in this lab\n",
        "- Choose a word from the vocabulary, and list the ten most similar words to it\n",
        "- Compare two words (at your choice) for their similarity\n",
        "- Find one word that does not belong to a list. You choose the list of words to operate on. \n",
        "- Draw the t-SNE graph of a keyword at your choice. The graph should show the most 10 similar words to it and the most 10 dissimilar words to it. \n",
        "\n",
        "Feel free to re-use the code in this lab. Please record the prcoess as you work on it. \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kKK5i-QeWYca"
      },
      "source": [
        "import re  # For preprocessing\n",
        "import pandas as pd  # For data handling\n",
        "from time import time  # To time our operations\n",
        "from collections import defaultdict  # For word frequency\n",
        "\n",
        "import spacy  # For preprocessing\n",
        "\n",
        "import logging  # Setting up the loggings to monitor gensim\n",
        "logging.basicConfig(format=\"%(levelname)s - %(asctime)s: %(message)s\", datefmt= '%H:%M:%S', level=logging.INFO)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YajBlZ-8_RJ9",
        "outputId": "1cbff996-4d00-475e-8c3a-d5e9f23d4630",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "path = \"/content/drive/My Drive/DSL/financial-news.csv\"\n",
        "df = pd.read_csv(path)\n",
        "df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4846, 2)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qUinMjTZWkYX",
        "outputId": "dc06f0a8-39bd-4736-8770-f113cae1fa8f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sentiment</th>\n",
              "      <th>news_text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>neutral</td>\n",
              "      <td>According to Gran , the company has no plans t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>neutral</td>\n",
              "      <td>Technopolis plans to develop in stages an area...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>negative</td>\n",
              "      <td>The international electronic industry company ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>positive</td>\n",
              "      <td>With the new production plant the company woul...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>positive</td>\n",
              "      <td>According to the company 's updated strategy f...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  sentiment                                          news_text\n",
              "0   neutral  According to Gran , the company has no plans t...\n",
              "1   neutral  Technopolis plans to develop in stages an area...\n",
              "2  negative  The international electronic industry company ...\n",
              "3  positive  With the new production plant the company woul...\n",
              "4  positive  According to the company 's updated strategy f..."
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7vjgYl5wWnyE",
        "outputId": "967cd544-a7cc-4423-d73f-0d9b8d3fec2c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        }
      },
      "source": [
        "df.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sentiment    0\n",
              "news_text    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8p_Trnm0Wxco",
        "outputId": "15da48fb-062e-4f66-81a3-6d14489022cd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        }
      },
      "source": [
        "df = df.dropna().reset_index(drop=True)\n",
        "df.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sentiment    0\n",
              "news_text    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6ncRQb0MaU9F"
      },
      "source": [
        "nlp = spacy.load('en', disable=['ner', 'parser']) # disabling Named Entity Recognition for speed\n",
        "\n",
        "def cleaning(doc):\n",
        "    # Lemmatizes and removes stopwords\n",
        "    # doc needs to be a spacy Doc object\n",
        "    txt = [token.lemma_ for token in doc if not token.is_stop]\n",
        "    # Word2Vec uses context words to learn the vector representation of a target word,\n",
        "    # if a sentence is only one or two words long,\n",
        "    # the benefit for the training is very small\n",
        "    if len(txt) > 2:\n",
        "        return ' '.join(txt)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vpBOZcuIalIv"
      },
      "source": [
        "brief_cleaning = (re.sub(\"[^A-Za-z']+\", ' ', str(row)).lower() for row in df['news_text'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RTFpsZvDatHG",
        "outputId": "0be2c2b9-3685-4e1e-98c7-cf330c1cf31b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "t = time()\n",
        "\n",
        "txt = [cleaning(doc) for doc in nlp.pipe(brief_cleaning, batch_size=5000, n_threads=-1)]\n",
        "\n",
        "print('Time to clean up everything: {} mins'.format(round((time() - t) / 60, 2)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Time to clean up everything: 0.14 mins\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t1rE2ZaabeIZ",
        "outputId": "f524446f-1436-4fff-a095-d5bfcc2ea09f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "df_clean = pd.DataFrame({'clean': txt})\n",
        "df_clean = df_clean.dropna().drop_duplicates()\n",
        "df_clean.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4713, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IJOBZ8BrbrhV"
      },
      "source": [
        "sent = [row.split() for row in df_clean['clean']]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hHnP9YkBbyjx",
        "outputId": "40ca024b-df31-4b29-ccd8-d50fc62e4f5e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 151
        }
      },
      "source": [
        "phrases = Phrases(sent, min_count=30, progress_per=1000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 01:47:00: collecting all words and their counts\n",
            "INFO - 01:47:00: PROGRESS: at sentence #0, processed 0 words and 0 word types\n",
            "INFO - 01:47:00: PROGRESS: at sentence #1000, processed 12950 words and 11150 word types\n",
            "INFO - 01:47:00: PROGRESS: at sentence #2000, processed 25453 words and 22557 word types\n",
            "INFO - 01:47:00: PROGRESS: at sentence #3000, processed 37165 words and 30953 word types\n",
            "INFO - 01:47:00: PROGRESS: at sentence #4000, processed 48254 words and 37977 word types\n",
            "INFO - 01:47:00: collected 43288 word types from a corpus of 56810 words (unigram + bigrams) and 4713 sentences\n",
            "INFO - 01:47:00: using 43288 counts as vocab in Phrases<0 vocab, min_count=30, threshold=10.0, max_vocab_size=40000000>\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_hSWnHydcGrB",
        "outputId": "943aeee7-2aaf-4287-b85e-a7a3fc1ebf77",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "bigram = Phraser(phrases)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 01:47:33: source_vocab length 43288\n",
            "INFO - 01:47:33: Phraser built with 28 phrasegrams\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cm-i13ircPl0"
      },
      "source": [
        "sentences = bigram[sent]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XKnj0v2ocXoD",
        "outputId": "f35389b8-77c1-46c6-f517-01a4742ed389",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "word_freq = defaultdict(int)\n",
        "for sent in sentences:\n",
        "    for i in sent:\n",
        "        word_freq[i] += 1\n",
        "len(word_freq)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7430"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yx39cC03cfnT",
        "outputId": "b4817717-08d3-4c74-a28e-99903c5ad909",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        }
      },
      "source": [
        "sorted(word_freq, key=word_freq.get, reverse=True)[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['company',\n",
              " 'finnish',\n",
              " 'eur_mn',\n",
              " 'say',\n",
              " 'year',\n",
              " 'share',\n",
              " 'finland',\n",
              " 'service',\n",
              " 'group',\n",
              " 'eur']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GiIaBUsGXm87"
      },
      "source": [
        "w2v_model = Word2Vec(min_count=10,\n",
        "                     window=2,\n",
        "                     size=240,\n",
        "                     sample=6e-5, \n",
        "                     alpha=0.03, \n",
        "                     min_alpha=0.0009, \n",
        "                     negative=30,\n",
        "                     workers=cores-1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XG_3GdpMX1V4",
        "outputId": "cbace53f-92f6-4036-c72d-7f7ee01dc867",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 218
        }
      },
      "source": [
        "t = time()\n",
        "\n",
        "w2v_model.build_vocab(sentences, progress_per=5000)\n",
        "\n",
        "print('Time to build vocab: {} mins'.format(round((time() - t) / 60, 2)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 01:51:47: collecting all words and their counts\n",
            "INFO - 01:51:47: PROGRESS: at sentence #0, processed 0 words, keeping 0 word types\n",
            "INFO - 01:51:48: collected 7430 word types from a corpus of 54358 raw words and 4713 sentences\n",
            "INFO - 01:51:48: Loading a fresh vocabulary\n",
            "INFO - 01:51:48: effective_min_count=10 retains 1073 unique words (14% of original 7430, drops 6357)\n",
            "INFO - 01:51:48: effective_min_count=10 leaves 40891 word corpus (75% of original 54358, drops 13467)\n",
            "INFO - 01:51:48: deleting the raw counts dictionary of 7430 items\n",
            "INFO - 01:51:48: sample=6e-05 downsamples 1073 most-common words\n",
            "INFO - 01:51:48: downsampling leaves estimated 11887 word corpus (29.1% of prior 40891)\n",
            "INFO - 01:51:48: estimated required memory for 1073 words and 240 dimensions: 2596660 bytes\n",
            "INFO - 01:51:48: resetting layer weights\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Time to build vocab: 0.01 mins\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DwRtINgXX95W",
        "outputId": "f227c29f-9435-4e52-9f12-e0b44299f25f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 571
        }
      },
      "source": [
        "t = time()\n",
        "\n",
        "w2v_model.train(sentences, total_examples=w2v_model.corpus_count, epochs=15, report_delay=1)\n",
        "\n",
        "print('Time to train the model: {} mins'.format(round((time() - t) / 60, 2)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 01:51:51: training model with 1 workers on 1073 vocabulary and 240 features, using sg=0 hs=0 sample=6e-05 negative=30 window=2\n",
            "INFO - 01:51:51: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:51: EPOCH - 1 : training on 54358 raw words (11821 effective words) took 0.2s, 61556 effective words/s\n",
            "INFO - 01:51:51: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:51: EPOCH - 2 : training on 54358 raw words (11917 effective words) took 0.2s, 64615 effective words/s\n",
            "INFO - 01:51:52: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:52: EPOCH - 3 : training on 54358 raw words (11977 effective words) took 0.2s, 63980 effective words/s\n",
            "INFO - 01:51:52: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:52: EPOCH - 4 : training on 54358 raw words (11924 effective words) took 0.2s, 64869 effective words/s\n",
            "INFO - 01:51:52: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:52: EPOCH - 5 : training on 54358 raw words (11915 effective words) took 0.2s, 63688 effective words/s\n",
            "INFO - 01:51:52: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:52: EPOCH - 6 : training on 54358 raw words (11901 effective words) took 0.2s, 65009 effective words/s\n",
            "INFO - 01:51:52: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:52: EPOCH - 7 : training on 54358 raw words (11619 effective words) took 0.2s, 61928 effective words/s\n",
            "INFO - 01:51:52: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:52: EPOCH - 8 : training on 54358 raw words (11935 effective words) took 0.2s, 60601 effective words/s\n",
            "INFO - 01:51:53: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:53: EPOCH - 9 : training on 54358 raw words (11754 effective words) took 0.2s, 62636 effective words/s\n",
            "INFO - 01:51:53: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:53: EPOCH - 10 : training on 54358 raw words (11940 effective words) took 0.2s, 63451 effective words/s\n",
            "INFO - 01:51:53: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:53: EPOCH - 11 : training on 54358 raw words (11770 effective words) took 0.2s, 61610 effective words/s\n",
            "INFO - 01:51:53: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:53: EPOCH - 12 : training on 54358 raw words (11840 effective words) took 0.2s, 63630 effective words/s\n",
            "INFO - 01:51:53: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:53: EPOCH - 13 : training on 54358 raw words (11860 effective words) took 0.2s, 63556 effective words/s\n",
            "INFO - 01:51:54: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:54: EPOCH - 14 : training on 54358 raw words (11852 effective words) took 0.2s, 62130 effective words/s\n",
            "INFO - 01:51:54: worker thread finished; awaiting finish of 0 more threads\n",
            "INFO - 01:51:54: EPOCH - 15 : training on 54358 raw words (11861 effective words) took 0.2s, 63034 effective words/s\n",
            "INFO - 01:51:54: training on a 815370 raw words (177886 effective words) took 3.0s, 60191 effective words/s\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Time to train the model: 0.05 mins\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xF17I7nJYSDQ",
        "outputId": "99cb3bb6-a8f0-47cb-cfd9-b22d1b0e8e92",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "w2v_model.init_sims(replace=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO - 01:52:18: precomputing L2-norms of word weight vectors\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oS8tMMm0Yg1L",
        "outputId": "8655bb29-8ee6-4636-fba4-9be8be838d1d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "source": [
        "w2v_model.wv.most_similar(positive=[\"transaction\"])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('group', 0.9999396800994873),\n",
              " ('intend', 0.9999327659606934),\n",
              " ('stora_enso', 0.9999313354492188),\n",
              " ('appoint', 0.9999309778213501),\n",
              " ('long_term', 0.9999307990074158),\n",
              " ('term', 0.9999303817749023),\n",
              " ('hour', 0.9999303817749023),\n",
              " ('sport', 0.9999303817749023),\n",
              " ('worker', 0.9999299049377441),\n",
              " ('name', 0.9999297857284546)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cuVXfDzPddEJ",
        "outputId": "3420a178-afbd-4afe-93a7-4fb432e0733e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "w2v_model.wv.similarity('profit', 'income')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.99987954"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KUKGNOUFeCPQ",
        "outputId": "7a2efbe1-5db4-49aa-9068-ea64339f7d98",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 139
        }
      },
      "source": [
        "w2v_model.wv.doesnt_match([\"company\", \"computer\", \"increased\"])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING - 01:57:15: vectors for words {'increased'} are not present in the model, ignoring these words\n",
            "/usr/local/lib/python3.6/dist-packages/gensim/models/keyedvectors.py:895: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n",
            "  vectors = vstack(self.word_vec(word, use_norm=True) for word in used_words).astype(REAL)\n",
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'computer'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OG3I6skbeeI9"
      },
      "source": [
        "def tsnescatterplot(model, word, list_names):\n",
        "    \"\"\" Plot in seaborn the results from the t-SNE dimensionality reduction algorithm of the vectors of a query word,\n",
        "    its list of most similar words, and a list of words.\n",
        "    \"\"\"\n",
        "    arrays = np.empty((0, 240), dtype='f')\n",
        "    word_labels = [word]\n",
        "    color_list  = ['red']\n",
        "\n",
        "    # adds the vector of the query word\n",
        "    arrays = np.append(arrays, model.wv.__getitem__([word]), axis=0)\n",
        "    \n",
        "    # gets list of most similar words\n",
        "    close_words = model.wv.most_similar([word])\n",
        "    \n",
        "    # adds the vector for each of the closest words to the array\n",
        "    for wrd_score in close_words:\n",
        "        wrd_vector = model.wv.__getitem__([wrd_score[0]])\n",
        "        word_labels.append(wrd_score[0])\n",
        "        color_list.append('blue')\n",
        "        arrays = np.append(arrays, wrd_vector, axis=0)\n",
        "    \n",
        "    # adds the vector for each of the words from list_names to the array\n",
        "    for wrd in list_names:\n",
        "        wrd_vector = model.wv.__getitem__([wrd])\n",
        "        word_labels.append(wrd)\n",
        "        color_list.append('green')\n",
        "        arrays = np.append(arrays, wrd_vector, axis=0)\n",
        "        \n",
        "    # Reduces the dimensionality from 300 to 15 dimensions with PCA\n",
        "    reduc = PCA(n_components=15).fit_transform(arrays)\n",
        "    \n",
        "    # Finds t-SNE coordinates for 2 dimensions\n",
        "    np.set_printoptions(suppress=True)\n",
        "    \n",
        "    Y = TSNE(n_components=2, random_state=0, perplexity=15).fit_transform(reduc)\n",
        "    \n",
        "    # Sets everything up to plot\n",
        "    df = pd.DataFrame({'x': [x for x in Y[:, 0]],\n",
        "                       'y': [y for y in Y[:, 1]],\n",
        "                       'words': word_labels,\n",
        "                       'color': color_list})\n",
        "    \n",
        "    fig, _ = plt.subplots()\n",
        "    fig.set_size_inches(9, 9)\n",
        "    \n",
        "    # Basic plot\n",
        "    p1 = sns.regplot(data=df,\n",
        "                     x=\"x\",\n",
        "                     y=\"y\",\n",
        "                     fit_reg=False,\n",
        "                     marker=\"o\",\n",
        "                     scatter_kws={'s': 40,\n",
        "                                  'facecolors': df['color']\n",
        "                                 }\n",
        "                    )\n",
        "    \n",
        "    # Adds annotations one by one with a loop\n",
        "    for line in range(0, df.shape[0]):\n",
        "         p1.text(df[\"x\"][line],\n",
        "                 df['y'][line],\n",
        "                 '  ' + df[\"words\"][line].title(),\n",
        "                 horizontalalignment='left',\n",
        "                 verticalalignment='bottom', size='medium',\n",
        "                 color=df['color'][line],\n",
        "                 weight='normal'\n",
        "                ).set_size(15)\n",
        "\n",
        "    \n",
        "    plt.xlim(Y[:, 0].min()-50, Y[:, 0].max()+50)\n",
        "    plt.ylim(Y[:, 1].min()-50, Y[:, 1].max()+50)\n",
        "            \n",
        "    plt.title('t-SNE visualization for {}'.format(word.title()))\n",
        "    "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uoZGw4xKe7F2",
        "outputId": "370f75ea-084d-418a-b07d-0df8f0a83f1a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        }
      },
      "source": [
        "tsnescatterplot(w2v_model, 'company', [i[0] for i in w2v_model.wv.most_similar(negative=[\"company\"])])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/gensim/matutils.py:737: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
            "  if np.issubdtype(vec.dtype, np.int):\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 648x648 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}